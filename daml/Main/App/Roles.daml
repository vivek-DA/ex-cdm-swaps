daml 1.2

module Main.App.Roles where


import Org.Isda.Cdm.EventSpecificationModule.Types.EventSpec (BaseEvent)
import Org.Isda.Cdm.EventSpecificationModule qualified as Cdm hiding (exercise)
import Main.App.Utils
import Org.Isda.Cdm.Classes hiding (Party, exercise)
import DA.Optional
import Main.Types
import Main.Event.Proposal as EP
import Test.Utils hiding (fieldWithEmptyMeta, emptyBaseEvent)
import Main.Event.Instance

import DA.Date as D


data AccountStatus = Pending|Active|Disabled
  deriving (Eq, Show)



data Currency = GBP|USD|EUR
  deriving (Eq, Show)

-- data AccountInfo = AccountInfo
--   with
--     accountName: Text
--     accountType: AccountType
--     accountLEI: Text
--     agreementId: Text
--     agreementType: AgreementType
--     agreementStart: Date
--     agreementEnd: Date
--     governingLaw: Jurisdiction
--     initialMarginAccount: Text
--     variationMarginAccount: Text
--       deriving (Eq, Show)

template ClearingAccount
  with
    cdmParty : Cdm.Party
    accountHolder: Party
    clearingMember: Party
    currency: Currency
    ccp: Party
    status: AccountStatus
  where
    signatory accountHolder, clearingMember, ccp
    controller accountHolder can
      nonconsuming ProposeTrade : ContractId EventProposal
        with
          counterParty: PartyWithId
          base: BaseEvent
          after: PostInceptionState
        do
          let spec = Cdm.NewTradeSpec with base, after
              ps1 = PartyWithId with
                p=accountHolder
                id=fromSome cdmParty.id
          event <- setEventRosettaKey $ Cdm.buildNewTradeEvent spec
          create EventProposal with ps=[ps1, counterParty], d = event, sigs = [accountHolder]


    controller ccp can
      CCP_Approve_ClientAccount : ContractId ClearingAccount
        do
          assert(status == Pending)
          create this with status = Active
      CCP_Disable_ClientAccount : ContractId ClearingAccount
        do
          assert(status == Active)
          create this with status = Disabled

    controller clearingMember can
      CM_Disable_ClientAccount : ContractId ClearingAccount
        do
          assert(status == Active)
          create this with status = Disabled


template OperatorRole
  with
    ops : Party
  where
    signatory ops
    controller ops can
      nonconsuming InviteForCCPRole : ContractId CCPRoleInvite
        with ccp : Party
        do
          create CCPRoleInvite with ..


template CCPRoleInvite
  with
    ops : Party
    ccp: Party
  where
    signatory ops
    controller ccp can
      Accept_CCPRole : ContractId CCPRole
        do
          create CCPRole with ..


template CCPRole
  with
    ops : Party
    ccp: Party
  where
    signatory ops, ccp

    controller ccp can
      nonconsuming InviteForClearingMemberRole : ContractId ClearingMemberRoleInvite
        with clearingMember : Party
        do
          create ClearingMemberRoleInvite with ..

      nonconsuming InviteForExecutingDealerRole : ContractId ExecutingDealerRoleInvite
        with executingDealer : Party
        do
          create ExecutingDealerRoleInvite with ..

      nonconsuming InviteForClearingServiceRole : ContractId ClearingServiceRoleInvite
        with clearingService : Party
        do
          create ClearingServiceRoleInvite with ..

      nonconsuming InviteForSEFRole : ContractId SEFRoleInvite
        with sef : Party
        do
          create SEFRoleInvite with ..


template ClearingMemberRoleInvite
  with
    ccp : Party
    clearingMember: Party
  where
    signatory ccp
    controller clearingMember can
      Accept_ClearingMemberRole : ContractId ClearingMemberRole
        do
          create ClearingMemberRole  with ..




template ClearingMemberRole
  with
    ccp : Party
    clearingMember: Party
  where
    signatory ccp, clearingMember

    controller clearingMember can
      nonconsuming InviteForClientRole : ContractId ClientRoleInvite
        with client : Party
        do
          create ClientRoleInvite with ..



template ClientRoleInvite
  with
    clearingMember : Party
    client: Party
    ccp: Party
  where
    signatory clearingMember, ccp
    controller client can
      Accept_ClientRole : ContractId ClientRole
        do
          create ClientRole with ..



template ClientRole
  with
    clearingMember : Party
    client: Party
    ccp: Party
  where
    signatory clearingMember, client, ccp

    controller client can
      nonconsuming RequestClearingAccount : ContractId ClearingAccount
        with
          cdmParty : Cdm.Party
          currency: Currency
        do

          create ClearingAccount with status = Pending, accountHolder=client, ..



template ExecutingDealerRoleInvite
  with
    ccp : Party
    executingDealer: Party
  where
    signatory ccp

    controller executingDealer can
      Accept_ExecutingDealerRole : ContractId ExecutingDealerRole
        do
          create ExecutingDealerRole with ..



template ExecutingDealerRole
  with
    ccp : Party
    executingDealer: Party
  where
    signatory ccp, executingDealer


template ClearingServiceRole
  with
    ccp : Party
    clearingService: Party
  where
    signatory ccp, clearingService


template ClearingServiceRoleInvite
  with
    ccp : Party
    clearingService: Party
  where
    signatory ccp

    controller clearingService can
      Accept_ClearingServiceRole : ContractId ClearingServiceRole
        do
          create ClearingServiceRole with ..




template SEFRole
  with
    ccp : Party
    sef: Party
  where
    signatory ccp, sef


template SEFRoleInvite
  with
    ccp : Party
    sef: Party
  where
    signatory ccp

    controller sef can
      Accept_SEFRole : ContractId SEFRole
        do
          create SEFRole with ..



test : Scenario ()
test = scenario do

  lch <- getParty "LCH"
  cme <-  getParty "CME"
  ice <- getParty "ICE"
  ops <- getParty "LCH-OPS"
  d03 <- getParty "D03"
  d01 <- getParty "D01"
  c01 <- getParty "C01"
  sef <- getParty "SEF"
  swapsClear <- getParty "SwapsClear"
  dtcc <- getParty "DTCC GTR"
  
  opsRole <- submit ops do
    create OperatorRole with
      ops
  ccpInviteLCH <- submit ops do
    exercise opsRole InviteForCCPRole with ccp = lch
  ccpLCH <- submit lch do
    exercise ccpInviteLCH Accept_CCPRole
  ccpInviteICE <- submit ops do
    exercise opsRole InviteForCCPRole with ccp = ice
  ccpICE <- submit ice do
    exercise ccpInviteICE Accept_CCPRole

  ccpInviteCME <- submit ops do
    exercise opsRole InviteForCCPRole with ccp = cme
  ccpCME <- submit cme do
    exercise ccpInviteCME Accept_CCPRole

  sefRoleInvite <- submit lch do
    exercise ccpLCH InviteForSEFRole with sef

  sefRole <-  submit sef do
    exercise sefRoleInvite Accept_SEFRole

  cm1RoleInvite <- submit lch do
    exercise ccpLCH InviteForClearingMemberRole with clearingMember = d01

  cm1Role <-  submit d01 do
    exercise cm1RoleInvite Accept_ClearingMemberRole

  cm2RoleInvite <- submit lch do
    exercise ccpLCH InviteForClearingMemberRole with clearingMember = d03

  cm2Role <-  submit d03 do
    exercise cm2RoleInvite Accept_ClearingMemberRole

  client1RoleInvite <-  submit d03 do
    exercise cm2Role InviteForClientRole with client = c01

  client1Role <-  submit c01 do
    exercise client1RoleInvite Accept_ClientRole


  cs1RoleInvite <- submit lch do
    exercise ccpLCH InviteForClearingServiceRole with clearingService = sef

  cs1Role <-  submit sef do
    exercise cs1RoleInvite Accept_ClearingServiceRole
  let accD01 = Cdm.Account with
        accountName = None
        accountType = Some (fieldWithEmptyMeta Cdm.AccountTypeEnum_House)
        accountNumber = fieldWithEmptyMeta "D01011566365" 
        accountBeneficiary = None
        servicingParty = None
        id = None
        
      d01Party  = Cdm.Party with
        id = Some "3993378688666"
        name =   Some (fieldWithEmptyMeta "DEALER-D01")
        account = Some accD01
        partyId = [fieldWithEmptyMeta "3993378688666"]
        person = []
      
      caccD03 = Cdm.Account with
        accountName = None
        accountType = Some (fieldWithEmptyMeta Cdm.AccountTypeEnum_Client)
        accountNumber = fieldWithEmptyMeta "C01728346828"
        accountBeneficiary = None
        servicingParty = None
        id = None
        
      cd03Party  = Cdm.Party with
        id = Some "3895466770349"
        name =   Some (fieldWithEmptyMeta "CLIENT-C01")
        account = Some caccD03
        partyId = [fieldWithEmptyMeta "3895466770349"]
        person = []

      accD03 = Cdm.Account with
        accountName = None
        accountType = Some (fieldWithEmptyMeta Cdm.AccountTypeEnum_House)
        accountNumber = fieldWithEmptyMeta "D03225622378"
        accountBeneficiary = None
        servicingParty = None
        id = None
        
      d03Party  = Cdm.Party with
        id = Some "9377538274179"
        name =   Some (fieldWithEmptyMeta "DEALER-D03")
        account = Some accD03
        partyId = [fieldWithEmptyMeta "9377538274179"]
        person = []




        -- What about these properties?
        -- agreementId= "ISDA-CM1-Client1"
        -- agreementType = ISDA
        -- agreementStart= date 2020 Jan 01
        -- agreementEnd= date 2025 Jan 01
        -- governingLaw= NY
        -- initialMarginAccount= "ABC"
        -- variationMarginAccount= "XYZ"

  clientAccountPend<- submit c01 do
    exercise client1Role RequestClearingAccount with
      cdmParty = cd03Party
      currency = EUR
  clientAccount<- submit lch do
    exercise clientAccountPend CCP_Approve_ClientAccount
    -- damlParty : Party
    -- partyId : Text
    -- account : Text
    -- name : Text



  let d01_ = PartyWithId with p = d01, id = fromSome d01Party.id
      c01_ = PartyWithId with p = c01, id = fromSome cd03Party.id
      ps_d01_ = Counterparty with
        damlParty=d01
        partyId=fromSome d01Party.id
        account = "D01011566365"
        name= "DEALER-D01"
      ps_cd03_ = Counterparty with
        damlParty=c01
        partyId=fromSome cd03Party.id
        account = "C01728346828"
        name= "CLIENT-C01"
      contract = buildCds 20000000.0 (ps_d01_, ps_cd03_) [(1, "CAXMKVEHOV"), (1, "CAXMKVEHOV_2")]
  let after = PostInceptionState with
                creditLimitInformation = None
                tradeWarehouseWorkflow = None
                contract = contract
  let base = emptyBaseEvent with
              action = Cdm.ActionEnum_New
              eventDate = D.date 2018 Sep 24
              eventIdentifier =
                [ Identifier with
                    id = None
                    issuer = None
                    issuerReference = None
                    assignedIdentifier =
                      [ AssignedIdentifier with
                          identifier = fieldWithEmptyMeta "RTPBD5KA8P"
                          version = Some 1
                      ]
                ]
  epCid<-submit c01 do
    exercise clientAccount ProposeTrade with counterParty =d01_ , base, after


  eiCid <- fromRightS "Unknown error" =<< (submit d01_.p do exercise epCid EP.Accept with exerciser = d01_.p)
  passToDate $ D.date 2018 Sep 24
  res <- submit c01_.p do exercise eiCid Lifecycle with exerciser = c01_.p, ciCids = [], ctiCids = []
  -- testData <- testData
  -- allegedOrder<- submit client1 do
  --   exercise clientAccount ProposeTrade with
  --     sef
  --     dealer = cm2
  --     clearingService = swapsClear
  --     base = testData.base
  --     after = testData.after


  -- allegedOrder<- submit sef do
  --   exercise allegedOrder Affirm with party=sef

  -- allegedOrder<- submit cm2 do
  --   exercise allegedOrder Affirm with party=cm2


  -- allegedOrder<- submit cm1 do
  --   exercise allegedOrder Affirm with party=cm1

  -- affirmedOrder<- submit sef do
  --   exercise allegedOrder Finalize with gtr= dtcc

  -- clearedTrade <- submit lch do
  --   exercise affirmedOrder Clear


  return ()
