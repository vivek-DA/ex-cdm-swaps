daml 1.2

module Main.App.Roles where


import Org.Isda.Cdm.EventSpecificationModule.Types.EventSpec (BaseEvent)
import Org.Isda.Cdm.EventSpecificationModule qualified as Cdm hiding (exercise)
import Main.App.Utils
import Org.Isda.Cdm.Classes hiding (Party, exercise)
import DA.Optional
import Main.Types
import Main.Event.Proposal as EP


data AccountStatus = Pending|Active|Disabled
  deriving (Eq, Show)



data Currency = GBP|USD|EUR
  deriving (Eq, Show)


template ClearingAccount
  with
    cdmParty : Cdm.Party
    accountHolder: Party
    clearingMember: Party
    currency: Currency
    ccp: Party
    status: AccountStatus
  where
    signatory accountHolder, clearingMember, ccp
    controller accountHolder can
      nonconsuming ProposeTrade : ContractId EventProposal
        with
          counterParty: PartyWithId
          base: BaseEvent
          after: PostInceptionState
        do
          let spec = Cdm.NewTradeSpec with base, after
              ps1 = PartyWithId with
                p=accountHolder
                id=fromSome cdmParty.id
          event <- setEventRosettaKey $ Cdm.buildNewTradeEvent spec
          create EventProposal with ps=[ps1, counterParty], d = event, sigs = [accountHolder]


    controller ccp can
      CCP_Approve_ClearingAccount : ContractId ClearingAccount
        do
          assert(status == Pending)
          create this with status = Active
      CCP_Disable_ClearingAccount : ContractId ClearingAccount
        do
          assert(status == Active)
          create this with status = Disabled

    controller clearingMember can
      CM_Disable_ClearingAccount : ContractId ClearingAccount
        do
          assert(status == Active)
          create this with status = Disabled


template OperatorRole
  with
    ops : Party
  where
    signatory ops
    controller ops can
      nonconsuming InviteForCCPRole : ContractId CCPRoleInvite
        with ccp : Party
        do
          create CCPRoleInvite with ..


template CCPRoleInvite
  with
    ops : Party
    ccp: Party
  where
    signatory ops
    controller ccp can
      Accept_CCPRole : ContractId CCPRole
        do
          create CCPRole with ..


template CCPRole
  with
    ops : Party
    ccp: Party
  where
    signatory ops, ccp

    controller ccp can
      nonconsuming InviteForClearingMemberRole : ContractId ClearingMemberRoleInvite
        with clearingMember : Party
        do
          create ClearingMemberRoleInvite with ..

      nonconsuming InviteForExecutingDealerRole : ContractId ExecutingDealerRoleInvite
        with executingDealer : Party
        do
          create ExecutingDealerRoleInvite with ..

      nonconsuming InviteForClearingServiceRole : ContractId ClearingServiceRoleInvite
        with clearingService : Party
        do
          create ClearingServiceRoleInvite with ..

      nonconsuming InviteForSEFRole : ContractId SEFRoleInvite
        with sef : Party
        do
          create SEFRoleInvite with ..


template ClearingMemberRoleInvite
  with
    ccp : Party
    clearingMember: Party
  where
    signatory ccp
    controller clearingMember can
      Accept_ClearingMemberRole : ContractId ClearingMemberRole
        do
          create ClearingMemberRole  with ..




template ClearingMemberRole
  with
    ccp : Party
    clearingMember: Party
  where
    signatory ccp, clearingMember

    controller clearingMember can
      nonconsuming InviteForClientRole : ContractId ClientRoleInvite
        with client : Party
        do
          create ClientRoleInvite with ..



template ClientRoleInvite
  with
    clearingMember : Party
    client: Party
    ccp: Party
  where
    signatory clearingMember, ccp
    controller client can
      Accept_ClientRole : ContractId ClientRole
        do
          create ClientRole with ..



template ClientRole
  with
    clearingMember : Party
    client: Party
    ccp: Party
  where
    signatory clearingMember, client, ccp

    controller client can
      nonconsuming RequestClearingAccount : ContractId ClearingAccount
        with
          cdmParty : Cdm.Party
          currency: Currency
        do

          create ClearingAccount with status = Pending, accountHolder=client, ..



template ExecutingDealerRoleInvite
  with
    ccp : Party
    executingDealer: Party
  where
    signatory ccp

    controller executingDealer can
      Accept_ExecutingDealerRole : ContractId ExecutingDealerRole
        do
          create ExecutingDealerRole with ..



template ExecutingDealerRole
  with
    ccp : Party
    executingDealer: Party
  where
    signatory ccp, executingDealer


template ClearingServiceRole
  with
    ccp : Party
    clearingService: Party
  where
    signatory ccp, clearingService


template ClearingServiceRoleInvite
  with
    ccp : Party
    clearingService: Party
  where
    signatory ccp

    controller clearingService can
      Accept_ClearingServiceRole : ContractId ClearingServiceRole
        do
          create ClearingServiceRole with ..




template SEFRole
  with
    ccp : Party
    sef: Party
  where
    signatory ccp, sef


template SEFRoleInvite
  with
    ccp : Party
    sef: Party
  where
    signatory ccp

    controller sef can
      Accept_SEFRole : ContractId SEFRole
        do
          create SEFRole with ..

