daml 1.2

module Main.App.Roles where


import Org.Isda.Cdm.EventSpecificationModule.Types.EventSpec (BaseEvent)
import Org.Isda.Cdm.EventSpecificationModule qualified as Cdm hiding (exercise)
import Main.App.Utils
import Org.Isda.Cdm.Classes hiding (Party, exercise)
import DA.Optional
import Main.Types
import Main.Event.Proposal as EP
import Main.Event.Instance

data AccountStatus = Pending|Active|Disabled
  deriving (Eq, Show)



data Currency = GBP|USD|EUR
  deriving (Eq, Show)


template ClearingAccount
  with
    cdmParty : Cdm.Party
    accountHolder: Party
    clearingMember: Party
    currency: Currency
    ccp: Party
    status: AccountStatus
    sef: Optional Party
  where
    signatory accountHolder, clearingMember, ccp
    key (accountHolder, clearingMember, ccp) : (Party, Party, Party)
    observer fromSome sef
    maintainer key._3
    controller accountHolder can
      nonconsuming ProposeTrade : ContractId EventProposal
        with
          counterParty: PartyWithId
          base: BaseEvent
          after: PostInceptionState
        do
          let spec = Cdm.NewTradeSpec with base, after
              ps1 = PartyWithId with
                p=accountHolder
                id=fromSome cdmParty.id
          event <- setEventRosettaKey $ Cdm.buildNewTradeEvent spec
          create EventProposal with ps=[ps1, counterParty], d = event, sigs = [accountHolder]


    controller ccp can
      CCP_Approve_ClearingAccount : ContractId ClearingAccount
        do
          assert(status == Pending)
          create this with status = Active
      CCP_Disable_ClearingAccount : ContractId ClearingAccount
        do
          assert(status == Active)
          create this with status = Disabled

    controller clearingMember can
      CM_Disable_ClearingAccount : ContractId ClearingAccount
        do
          assert(status == Active)
          create this with status = Disabled


template OperatorRole
  with
    ops : Party
  where
    signatory ops
    controller ops can
      nonconsuming InviteForCCPRole : ContractId CCPRoleInvite
        with ccp : Party
        do
          create CCPRoleInvite with ..


template CCPRoleInvite
  with
    ops : Party
    ccp: Party
  where
    signatory ops
    controller ccp can
      Accept_CCPRole : ContractId CCPRole
        do
          create CCPRole with ..


template CCPRole
  with
    ops : Party
    ccp: Party
  where
    signatory ccp, ops

    controller ccp can
      nonconsuming InviteForClearingMemberRole : ContractId ClearingMemberRoleInvite
        with 
          clearingMember : Party
          clearingService : Party
        do
          exerciseByKey @ClearingServiceRole (clearingService, ccp)  CS_InviteForClearingMemberRole with ..

      nonconsuming InviteForExecutingDealerRole : ContractId ExecutingBrokerRoleInvite
        with executingBroker : Party
        do
          create ExecutingBrokerRoleInvite with ..

      nonconsuming InviteForClearingServiceRole : ContractId ClearingServiceRoleInvite
        with clearingService : Party
        do
          create ClearingServiceRoleInvite with ..

      nonconsuming InviteForSEFRole : ContractId SEFRoleInvite
        with sef : Party
        do
          create SEFRoleInvite with ..
      
      -- nonconsuming TriggerLifeCycleOnEventInstance: ContractId LifecycleResult



template ClearingMemberRoleInvite
  with
    ccp : Party
    clearingMember: Party
    clearingService: Party
  where
    signatory ccp, clearingService
    controller clearingMember can
      Accept_ClearingMemberRole : ContractId ClearingMemberRole
        do
          cid<-create ClearingServiceMemeberDelegationInvite with ..
          exercise cid Accept_ClearingServiceMemeberDelegationInvite
          create ClearingMemberRole  with ..


template ClearingServiceMemeberDelegationInvite
  with
    ccp: Party
    clearingMember: Party
    clearingService: Party
  where
    signatory ccp, clearingMember, 
    controller clearingService can
      Accept_ClearingServiceMemeberDelegationInvite : ContractId ClearingServiceMemeberDelegation
        do
          create ClearingServiceMemeberDelegation with ..
          

template ClearingServiceMemeberDelegation
  with
    ccp: Party
    clearingMember: Party
    clearingService: Party
  where
    signatory ccp, clearingMember, clearingService


template ClearingMemberRole
  with
    ccp : Party
    clearingMember: Party
    clearingService : Party
  where
    signatory ccp, clearingMember

    controller clearingMember can
      nonconsuming InviteForClientRole : ContractId ClientRoleInvite
        with client : Party
        do
          create ClientRoleInvite with ..
    
    controller ccp can
      nonconsuming CM_TriggerLifeCycle: LifecycleResult
        with 
          epCid : ContractId EventInstance
          client : Party
        do
          exerciseByKey @ClientRole (client, clearingMember, ccp)  TriggerLifeCycle with ..






template ClientRoleInvite
  with
    clearingMember : Party
    client: Party
    ccp: Party
  where
    signatory clearingMember, ccp
    controller client can
      Accept_ClientRole : ContractId ClientRole
        do

          create ClientRole with ..





template SefDelegation
  with
    accountHolder: Party
    clearingMember : Party
    ccp: Party
    sef: Party
  where
    signatory clearingMember, accountHolder, ccp
    key (accountHolder, clearingMember, ccp, sef) : (Party, Party, Party, Party)
    maintainer key._2
    controller sef can
      nonconsuming ProposeBilateralTradeOnBehalf : ContractId EventProposal
        with
          counterParty: PartyWithId
          base: BaseEvent
          after: PostInceptionState
        do
          let dKey = (accountHolder,clearingMember, ccp)
          debug ("in ProposeBilateralTradeOnBehalf" <> show dKey)
          exerciseByKey @ClearingAccount  dKey ProposeTrade with ..

      nonconsuming AcceptClearedTradeOnBehalf : Either
                             (ContractId EventProposal)
                             (ContractId Main.Event.Instance.EventInstance)
          with
            epCid: ContractId EventProposal
        do
          exercise epCid EP.Accept with exerciser = accountHolder


      nonconsuming ProposeAndAcceptClearedTradeOnBehalfBothParties :  Either
                             (ContractId EventProposal)
                             (ContractId Main.Event.Instance.EventInstance)
        with
          counterParty: PartyWithId
          counterPartyClearingMember: Party
          base: BaseEvent
          after: PostInceptionState
        do
          epCid<- exerciseByKey @ClearingAccount (accountHolder,clearingMember, ccp) ProposeTrade with ..
          exerciseByKey @SefDelegation (counterParty.p, counterPartyClearingMember, ccp, sef) AcceptClearedTradeOnBehalf with epCid





template ClientRole
  with
    clearingMember : Party
    client: Party
    ccp: Party
  where
    signatory clearingMember, client, ccp
    key (client, clearingMember, ccp) : (Party, Party, Party)
    maintainer key._3
    controller client can
      nonconsuming RequestClearingAccount : ContractId ClearingAccount
        with
          cdmParty : Cdm.Party
          currency: Currency
          sef: Party
        do
          create SefDelegation with accountHolder =client,  ..
          create ClearingAccount with status = Pending, accountHolder=client, sef = Some sef, ..
    controller clearingMember can
      TriggerLifeCycle : LifecycleResult
        with 
          epCid : ContractId EventInstance
        do
          exercise epCid Lifecycle with exerciser = client, ciCids = [], ctiCids = []
          



template ExecutingBrokerRoleInvite
  with
    ccp : Party
    executingBroker: Party
  where
    signatory ccp

    controller executingBroker can
      Accept_ExecutingBrokerRole : ContractId ExecutingBrokerRole
        do
          create ExecutingBrokerRole with ..



template ExecutingBrokerRole
  with
    ccp : Party
    executingBroker: Party
  where
    signatory ccp, executingBroker
    
    controller executingBroker can
      nonconsuming EB_RequestClearingAccount : ContractId ClearingAccount
        with
          cdmParty : Cdm.Party
          currency: Currency
          sef: Party
          clearingMember: Party
        do
          create SefDelegation with accountHolder =executingBroker,  ..
          create ClearingAccount with status = Pending, accountHolder=executingBroker, sef = Some sef, ..


template ClearingServiceRole
  with
    ccp : Party
    clearingService: Party
    observers : [Party]

  where
    signatory ccp, clearingService
    observer observers
    key (clearingService, ccp): (Party, Party)
    maintainer key._2
    controller ccp can
      AddObserver : ContractId ClearingServiceRole
        with
          newObserver: Party
        do
          create this with observers = newObserver :: observers

      nonconsuming CS_InviteForClearingMemberRole : ContractId ClearingMemberRoleInvite
        with 
          clearingMember : Party
        do
          create ClearingMemberRoleInvite with ..
          


template ClearingServiceRoleInvite
  with
    ccp : Party
    clearingService: Party
  where
    signatory ccp

    controller clearingService can
      Accept_ClearingServiceRole : ContractId ClearingServiceRole
        do
          create ClearingServiceRole with observers =[], ..




template SEFRole
  with
    ccp : Party
    sef: Party
  where
    signatory ccp, sef
    controller sef can
      nonconsuming SEF_ProposeBilateralTradeOnBehalf : ContractId EventProposal
        with
          tradeProposer: Party 
          clearingMember: Party
          counterParty: PartyWithId
          base: BaseEvent
          after: PostInceptionState
        do
          let delegationKey= (tradeProposer, clearingMember, ccp, sef)
          debug ("in SEF Role " <>  show delegationKey)
          exerciseByKey @SefDelegation delegationKey ProposeBilateralTradeOnBehalf  with ..

      nonconsuming SEF_ProposeAndAcceptClearedTradeOnBehalfBothParties :  Either
                             (ContractId EventProposal)
                             (ContractId Main.Event.Instance.EventInstance)
        with
          tradeProposer : Party
          counterParty: PartyWithId
          clearingMember: Party
          counterPartyClearingMember: Party
          base: BaseEvent
          after: PostInceptionState
        do
          exerciseByKey @SefDelegation (tradeProposer, clearingMember, ccp, sef) ProposeAndAcceptClearedTradeOnBehalfBothParties  with ..



template SEFRoleInvite
  with
    ccp : Party
    sef: Party
  where
    signatory ccp

    controller sef can
      Accept_SEFRole : ContractId SEFRole
        do
          create SEFRole with ..


